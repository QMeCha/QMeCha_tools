#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import os
import numpy as np
import math
import time
import argparse

'''
This script replaces the full Jastrow factor from a
dimer in equilibrium or in dissociation into the Jastrow
factor of its monomers. Replaces by default two-body cusps
(jc2), can also replace one-body cusps (jc1), two-body
dynamical Jastrow (jd2) and its associated basis set (jbas).
One-body dynamical Jastrow (jd1) not implemented.


REQUIRED INPUTS
jstFileIn:   Dimer jst.sav path
jstFileOut1: Monomer 1 jst.sav path
jstFileOut2: Monomer 2 jst.sav path

-id1:   List of indices associated with monomer 1.
-id2:   List of indices associated with monomer 2.
-param: Path to param.inp file generated by QMeCha.
-xyz:   Path to .xyz file generated for QMeCha.

OPTIONAL ARGUMENTS
-jc1:   Replace one-body cusps.
-jd2:   Replace two-body dynamical Jastrow.
-jbas:  Replace basis set parameters associated
        with two-body dynamical Jastrow.
        Takes additional arguments:
            jstBasIn:   Dimer frmbss.sav path
            jstBasOut1: Monomer 1 frmbss.sav path
            jstBasOut2: Monomer 2 frmbss.sav path
'''


p = argparse.ArgumentParser(
    prog="replaceDimerJast.py",
    description="Replaces the Jastrow factor from a dimer into its constituents. Two body cusps (jc2) are replaced always.",
    epilog="Replacing the one-body dynamical Jastrow not yet implemented. ",
)

p.add_argument("jstFileIn", help="Path of the source jst.sav file")
p.add_argument(
    "jstFileOut1", help="Path of the destination jst.sav file (first monomer)"
)
p.add_argument(
    "jstFileOut2", help="Path of the destination jst.sav file (second monomer)"
)

p.add_argument(
    "-id1",
    nargs="+",
    type=int,
    required=True,
    help="Indices of the first monomer, as they appear in the .xyz file.",
)
p.add_argument(
    "-id2",
    nargs="+",
    type=int,
    required=True,
    help="Indices of the second monomer, as they appear in the .xyz file.",
)
p.add_argument(
    "-param",
    type=str,
    required=True,
    help="Path to parameter file generated by QMeCha for the dimer.",
)
p.add_argument(
    "-xyz", type=str, required=True, help="Path to .xyz file generated by QMeCha for the dimer."
)

p.add_argument(
    "-jd2",
    action="store_true",
    help="(optional) Replace two-body dynamical Jastrow.",
)
p.add_argument(
    "-jc1", action="store_true", help="(optional) Replace one-body cusps."
)
p.add_argument(
    "-jbas",
    nargs=3,
    metavar=("jstBasIn", "jstBasOut1", "jstBasOut2"),
    help="(optional) Replace Jastrow basis set (input frmbass.sav path, monomer 1 frmbass.sav path, monomer 2 frmbass.sav path).",
)

p.add_argument(
    "--jtype",
    type=str,
    default='m',
    help="(optional) Type of correlated Jastrow: m (default), s, c",
)


args = p.parse_args()

def readJastFact(
    namejastFile: str,
    oneBodyCusp=None,
    twoBodyCusp=None,
    oneBodyDyn=None,
    twoBodyDyn=None,
):
    jastFileIn = open(namejastFile, "r")
    jastFileInLines = jastFileIn.readlines()
    jastFileIn.close()
    # One body Cusp
    if type(oneBodyCusp) == list:
        for line_num in range(len(jastFileInLines)):
            if "# One body Cusp parameters" in jastFileInLines[line_num]:
                break
        oneBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        line_num = line_num + 1
        oneBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        cmp_num = int(jastFileInLines[line_num].split()[2])
        if cmp_num > 0:
            for i in range(3 * cmp_num):
                line_num = line_num + 1
                oneBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        line_num = line_num + 1
        oneBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        cmp_num = int(jastFileInLines[line_num].split()[2])
        if cmp_num > 0:
            for i in range(3 * cmp_num):
                line_num = line_num + 1
                oneBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))

    # Two body Cusp
    if type(twoBodyCusp) == list:
        for line_num in range(len(jastFileInLines)):
            if "# Two body Cusp parameters" in jastFileInLines[line_num]:
                break
        twoBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        line_num = line_num + 1
        twoBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        cmp_num = int(jastFileInLines[line_num].split()[2])
        if cmp_num > 0:
            for i in range(3 * cmp_num):
                line_num = line_num + 1
                twoBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        line_num = line_num + 1
        twoBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        cmp_num = int(jastFileInLines[line_num].split()[2])
        if cmp_num > 0:
            for i in range(3 * cmp_num):
                line_num = line_num + 1
                twoBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        line_num = line_num + 1
        twoBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))
        cmp_num = int(jastFileInLines[line_num].split()[2])
        if cmp_num > 0:
            for i in range(3 * cmp_num):
                line_num = line_num + 1
                twoBodyCusp.append(jastFileInLines[line_num].replace("\n", ""))

    # One body Dynamical
    if type(oneBodyDyn) == list:
        for line_num in range(len(jastFileInLines)):
            if (
                "# Coefficients of the 1Body linear Jastrow"
                in jastFileInLines[line_num]
            ):
                break
        oneBodyDyn.append(jastFileInLines[line_num].replace("\n", ""))
        line_num = line_num + 1
        cmp_num = int(jastFileInLines[line_num].split()[0])
        oneBodyDyn.append(jastFileInLines[line_num].replace("\n", ""))
        if cmp_num > 0:
            for i in range(cmp_num):
                line_num = line_num + 1
                oneBodyDyn.append(jastFileInLines[line_num].replace("\n", ""))

    # Two body Dynamical
    if type(twoBodyDyn) == list:
        for line_num in range(len(jastFileInLines)):
            if (
                "# Coefficients of the 2Body linear Jastrow"
                in jastFileInLines[line_num]
            ):
                break
        twoBodyDyn.append(jastFileInLines[line_num].replace("\n", ""))
        line_num = line_num + 1
        cmp_num = int(jastFileInLines[line_num].split()[0])
        twoBodyDyn.append(jastFileInLines[line_num].replace("\n", ""))
        if cmp_num > 0:
            for i in range(cmp_num):
                line_num = line_num + 1
                twoBodyDyn.append(jastFileInLines[line_num].replace("\n", ""))


def writeJastFact(
    namejastFile: str,
    oneBodyCusp: list,
    twoBodyCusp: list,
    oneBodyDyn: list,
    twoBodyDyn: list,
):
    jastFilewr = open(namejastFile, "w")
    # One body Cusp
    for line_num in range(len(oneBodyCusp)):
        jastFilewr.write(str(oneBodyCusp[line_num]) + "\n")

    # Two body Cusp
    for line_num in range(len(twoBodyCusp)):
        jastFilewr.write(str(twoBodyCusp[line_num]) + "\n")

    # One body Dyn
    for line_num in range(len(oneBodyDyn)):
        jastFilewr.write(str(oneBodyDyn[line_num]) + "\n")

    # Two body Dyn
    for line_num in range(len(twoBodyDyn)):
        jastFilewr.write(str(twoBodyDyn[line_num]) + "\n")

    jastFilewr.close()


def calculateJastSize(jastform):
    jastsize = 0
    jast_orbitals = jastform.split("G")[:-1]
    orb_sizes = {"s": 1, "p": 3, "d": 5, "f": 7, "g": 9, "h": 11}
    for orb in jast_orbitals:
        orb_type = orb[1]
        jastsize += orb_sizes.get(orb_type)
    return jastsize


def readJastBas(namejastFile: str, jastrowBasis: list):
    jastFileIn = open(namejastFile, "r")
    jastFileLines = jastFileIn.readlines()
    jastFileIn.close()
    for i, line in enumerate(jastFileLines):
        if i == 0:
            jastrowBasis.append(line)
            atomBasis = []
            continue
        elif line.split()[0][0] == "*":
            if atomBasis != []:
                jastrowBasis.append(atomBasis)
            atomBasis = []
            atomBasis.append(line)
            continue
        atomBasis.append(line)  # assumption is we use the same basis set
    if atomBasis != []:
        jastrowBasis.append(atomBasis)


def writeJastBas(namejastFile: str, jastrowBasis: list, atom_indices: list):
    jastFileOut = open(namejastFile, "w")
    # Jastrow basis set coefficients
    jastFileOut.write(jastrowBasis[0])
    for a_idx in atom_indices:
        for line in jastrowBasis[a_idx]:
            jastFileOut.write(line)

    jastFileOut.close()


def readXyzFile(xyzFileName: str, atom_types: list):
    skipped = 0
    xyzFile = open(xyzFileName, "r")
    xyzFileLines = xyzFile.readlines()
    xyzFile.close()
    for line in xyzFileLines:
        if line[0] != "*":
            skipped += 1
            continue
        else:
            atom_types.append(line[1])


def readParamFile(paramFileName: str, jastSizes: list, atom_types: list):
    paramFile = open(paramFileName, "r")
    paramFileLines = paramFile.readlines()
    paramFile.close()
    for i, line in enumerate(paramFileLines):
        if line.split()[0] in atom_types:
            jastform = line.split()[-1]
            jastsize = calculateJastSize(jastform)
            for i, atom in enumerate(atom_types):
                if line.split()[0] == atom:
                    jastSizes[i] = jastsize


def replaceDynJast(
    twoBodyDynIn: list,
    twoBodyDynOut: list,
    jastSizes: list,
    atom_indices: list,
    jtype: str
):
    ends = np.cumsum(jastSizes)
    starts = ends - (np.array(jastSizes) - 1)
    jastSizes_partial = np.array(jastSizes)[np.array(atom_indices) - 1]
    ends_partial = np.cumsum(jastSizes_partial)
    starts_partial = ends_partial - (jastSizes_partial - 1)

    for i, line in enumerate(twoBodyDynIn):
        if jtype == 's' or j == 'c':
            if i in (0,1,2):
                twoBodyDynOut.append(line)
                continue
        elif jtype == 'm':
            if i in (0,1):
                twoBodyDynOut.append(line)
                continue
        else:
            print("Error! Jastrow type not recognized!")
            sys.exit(1)
        a1 = int(line.split()[0])
        a2 = int(line.split()[1])
        coeff = ' '.join(line.split()[2:])
        atom_id1 = np.argwhere(a1 <= ends)[0][0] + 1
        atom_id2 = np.argwhere(a2 <= ends)[0][0] + 1
        found = 1
        try:
            coeff_in_1 = np.argwhere(atom_indices == atom_id1)[0][0]
            coeff_in_2 = np.argwhere(atom_indices == atom_id2)[0][0]
        except:
            found = 0
            pass
        if found:
            a1_mod = starts_partial[coeff_in_1] + (a1 - starts[atom_id1 - 1])
            a2_mod = starts_partial[coeff_in_2] + (a2 - starts[atom_id2 - 1])
            newline = str(a1_mod) + " " + str(a2_mod) + " " + coeff
            twoBodyDynOut.append(newline)
        twoBodyDynOut[1] = " ".join(twoBodyDynOut[1].split()[1:])
        if jtype == 'm' or jtype == 'c':
            twoBodyDynOut[1] = str(len(twoBodyDynOut[2:])) + " " + twoBodyDynOut[1]
        elif jtype == 's':
            twoBodyDynOut[1] = str(len(twoBodyDynOut[2:])-1) + " " + twoBodyDynOut[1]



def replaceOneBodyCusp(
    oneBodyCuspIn: list, oneBodyCuspOut: list, atom_indices: list
):
    oneBodyCuspOut.append(oneBodyCuspIn[0])
    oneBodyCuspOut.append(oneBodyCuspIn[1])
    for a_idx in atom_indices:
        for i in range(3):
            oneBodyCuspOut.append(oneBodyCuspIn[2 + i + (a_idx - 1) * 3])
    oneBodyCuspOut.append(oneBodyCuspIn[-1])
    oneBodyCuspOut[1] = oneBodyCuspOut[1].split()
    oneBodyCuspOut[1].pop(2)
    oneBodyCuspOut[1].insert(2, str(len(atom_indices)))
    oneBodyCuspOut[1] = " ".join(oneBodyCuspOut[1])

if __name__ == "__main__":
    paramFileName = args.param
    xyzFileName = args.xyz

    idx_1 = set(args.id1)
    idx_2 = set(args.id2)

    if idx_1.intersection(idx_2) != set():
        raise Exception('Error: Dimers not clearly defined, overlapping indices.')
        sys.exit(1)

    idx_1 = sorted(idx_1)
    idx_2 = sorted(idx_2)

    name_jastFileIn = args.jstFileIn
    name_jastFileOut1 = args.jstFileOut1
    name_jastFileOut2 = args.jstFileOut2
    jasType = args.jtype


    if args.jbas:
        name_jastBasIn, name_jastBasOut1, name_jastBasOut2 = args.jbas
        jastBasisIn = []

    atom_types = []
    readXyzFile(xyzFileName, atom_types)

    jastSizes = [0] * (len(idx_1) + len(idx_2)) #initialize array
    readParamFile(paramFileName, jastSizes, atom_types)

    twoBodyDynIn, twoBodyCuspIn = [], []
    oneBodyCuspIn = []

    oneBodyCuspOut1, oneBodyCuspOut2 = [], []
    twoBodyDynOut1, twoBodyDynOut2 = [], []

    oneBodyDynD1, oneBodyDynD2 = [], []

    readJastFact(
        name_jastFileIn,
        twoBodyDyn=twoBodyDynIn,
        twoBodyCusp=twoBodyCuspIn,
        oneBodyCusp=oneBodyCuspIn,
    )
    readJastFact(
        name_jastFileOut1,
        oneBodyDyn=oneBodyDynD1,
        twoBodyDyn=twoBodyDynOut1,
        oneBodyCusp=oneBodyCuspOut1,
    )
    readJastFact(
        name_jastFileOut2,
        oneBodyDyn=oneBodyDynD2,
        twoBodyDyn=twoBodyDynOut2,
        oneBodyCusp=oneBodyCuspOut2,
    )

    if args.jd2:
        twoBodyDynOut1, twoBodyDynOut2 = [], []
        replaceDynJast(twoBodyDynIn, twoBodyDynOut1, jastSizes, idx_1, jasType)
        replaceDynJast(twoBodyDynIn, twoBodyDynOut2, jastSizes, idx_2, jasType)

    if args.jc1:
        oneBodyCuspOut1, oneBodyCuspOut2 = [], []
        replaceOneBodyCusp(oneBodyCuspIn, oneBodyCuspOut1, idx_1)
        replaceOneBodyCusp(oneBodyCuspIn, oneBodyCuspOut2, idx_2)


    writeJastFact(
        name_jastFileOut1,
        oneBodyCuspOut1,
        twoBodyCuspIn,
        oneBodyDynD1,
        twoBodyDynOut1,
    )
    writeJastFact(
        name_jastFileOut2,
        oneBodyCuspOut2,
        twoBodyCuspIn,
        oneBodyDynD2,
        twoBodyDynOut2,
    )

    if args.jbas:
        readJastBas(name_jastBasIn, jastBasisIn)

        writeJastBas(name_jastBasOut1, jastBasisIn, idx_1)
        writeJastBas(name_jastBasOut2, jastBasisIn, idx_2)
